const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const { registerValidation, loginValidation } = require('../validation');
const bcrypt = require('bcryptjs');
// const router = required('express').Router();
// VALIDATION
const User = require('../models/User');


// Account registration
router.post('/register', async (req, res) => {

    // Validate the data before creating a new User
    // const {error} = schema.validate();

    

    const {error} = registerValidation(req.body);
    if (error) return res.status(400).send(error.details[0].message);

    //Check if the user is already in the database
    const emailExists = await User.findOne({email: req.body.email});
    if(emailExists) return res.status(400).send('email already exists');

    //Hash passwords
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(req.body.password, salt);

    // Create a new user
     const user = new User({
        name: req.body.name,
        email: req.body.email,
        password: hashedPassword,
        birth_year: req.body.birth_year,
    });
    try{
        const savedUser = await user.save();
        res.send({ user: user._id});
    }catch(err){
        res.status(400).send(err);
    }
});

// Account login
router.post('/login', async (req, res) => {

    const {error} = loginValidation(req.body);
    if (error) return res.status(400).send(error.details[0].message);

    //Check if the email is already in the database
    const user = await User.findOne({email: req.body.email});
    if(!user) return res.status(400).send('email is not found');
    //check if password is correct
    const validPass = await bcrypt.compare(req.body.password, user.password);
    if(!validPass) return res.status(400).send('invalid password');

    //Create and assign a token
    const token = jwt.sign({_id: user._id}, process.env.TOKEN_SECRET);
    res.header('auth-token', token).send(token);

    res.send('Logged in!');


    // const user = new User({
    //     email: req.body.email,
    //     password: req.body.password 
    // });
    // try{
    //     const savedUser = await user.save();
    //     res.send(savedUser);
    // }catch(err){
    //     res.status(400).send(err);
    // }
});



module.exports = router;